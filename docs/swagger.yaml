basePath: /api/v1
definitions:
  handlers.RefreshRequest:
    properties:
      refresh_token:
        example: dG9rZW4uLi4=
        type: string
    required:
    - refresh_token
    type: object
  handlers.RefreshResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIs...
        type: string
    type: object
  handlers.TriggerNordpoolFetchRequest:
    properties:
      currencies:
        items:
          type: string
        type: array
      end_date:
        type: string
      start_date:
        type: string
      zones:
        items:
          type: string
        type: array
    required:
    - end_date
    - start_date
    type: object
  handlers.TriggerNordpoolFetchResponse:
    properties:
      message:
        type: string
    type: object
  models.ChangePasswordRequest:
    properties:
      current_password:
        type: string
      new_password:
        maxLength: 72
        minLength: 8
        type: string
    required:
    - current_password
    - new_password
    type: object
  models.CompleteResetRequest:
    properties:
      new_password:
        maxLength: 72
        minLength: 8
        type: string
      token:
        type: string
    required:
    - new_password
    - token
    type: object
  models.CreateRoleRequest:
    properties:
      is_admin_group:
        type: boolean
      is_protected:
        type: boolean
      name:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - name
    type: object
  models.CreateSpotPriceRequest:
    properties:
      currency_id:
        type: string
      price:
        example: 42.5
        type: number
      timestamp:
        example: "2024-03-20T13:00:00Z"
        type: string
      zone_id:
        type: string
    required:
    - currency_id
    - price
    - timestamp
    - zone_id
    type: object
  models.CreateSpotPricesRequest:
    properties:
      spot_prices:
        items:
          $ref: '#/definitions/models.CreateSpotPriceRequest'
        minItems: 1
        type: array
    required:
    - spot_prices
    type: object
  models.CreateUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  models.Currency:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        example: USD
        type: string
      updated_at:
        type: string
    required:
    - name
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.HealthResponse:
    properties:
      status:
        example: healthy
        type: string
      time:
        example: "2024-03-20T13:00:00Z"
        type: string
    type: object
  models.LoginRequest:
    properties:
      password:
        type: string
      username:
        maxLength: 50
        type: string
    required:
    - password
    - username
    type: object
  models.LoginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  models.PasswordResetRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  models.ResendVerificationRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  models.Role:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      is_admin_group:
        type: boolean
      is_protected:
        type: boolean
      name:
        maxLength: 50
        minLength: 3
        type: string
      updated_at:
        type: string
    required:
    - name
    type: object
  models.SpotPrice:
    properties:
      created_at:
        type: string
      currency_id:
        type: string
      id:
        type: string
      price:
        type: number
      timestamp:
        type: string
      updated_at:
        type: string
      zone_id:
        type: string
    required:
    - currency_id
    - price
    - timestamp
    - zone_id
    type: object
  models.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  models.UpdateRoleRequest:
    properties:
      is_admin_group:
        type: boolean
      is_protected:
        type: boolean
      name:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - name
    type: object
  models.UpdateUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      role_id:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      id:
        type: string
      last_failed_login:
        type: string
      last_login_at:
        type: string
      password_changed_at:
        type: string
      role:
        $ref: '#/definitions/models.Role'
      role_id:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.Zone:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        example: SE1
        type: string
      timezone:
        example: Europe/Stockholm
        type: string
      updated_at:
        type: string
    required:
    - name
    - timezone
    type: object
host: localhost:8080
info:
  contact: {}
  description: WattWatch API server.
  title: WattWatch API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return access and refresh tokens
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Account locked or email not verified
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: User login
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get a new access token using a refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.RefreshResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Invalid or expired refresh token
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account. First user gets admin role, subsequent
        users get user role.
      parameters:
      - description: User registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid request format, username/email already exists, or validation
            error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Registration is disabled (unless admin or first user)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Username or email already exists
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to create user or process request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register new user
      tags:
      - auth
  /auth/resend-verification:
    post:
      consumes:
      - application/json
      description: Resend verification email for authenticated user
      parameters:
      - description: Resend verification request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ResendVerificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Email already verified or missing
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Resend verification email
      tags:
      - auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Request a password reset email. For security, always returns success
        even if email doesn't exist.
      parameters:
      - description: User's email
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.PasswordResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Reset link will be sent if email exists
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Invalid email format or user has no email
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to process request, create token, or send email
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Request password reset
      tags:
      - auth
  /auth/reset-password/complete:
    post:
      consumes:
      - application/json
      description: Reset user's password using reset token
      parameters:
      - description: Reset completion details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CompleteResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successfully
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Invalid request, expired/invalid/used token, or password reuse
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to verify token, process password, or update user
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Complete password reset
      tags:
      - auth
  /auth/verify-email:
    get:
      consumes:
      - application/json
      description: Verify a user's email address using the verification token
      parameters:
      - description: Email verification token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Email verified successfully
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Invalid, expired, or missing token
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Verify email address
      tags:
      - auth
  /currencies:
    get:
      consumes:
      - application/json
      description: Returns a list of all currencies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Currency'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List all currencies
      tags:
      - currencies
    post:
      consumes:
      - application/json
      description: Creates a new currency
      parameters:
      - description: Currency to create
        in: body
        name: currency
        required: true
        schema:
          $ref: '#/definitions/models.Currency'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Currency'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new currency
      tags:
      - currencies
  /currencies/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing currency
      parameters:
      - description: Currency ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid currency ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Currency not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a currency
      tags:
      - currencies
    get:
      consumes:
      - application/json
      description: Returns a currency by its ID
      parameters:
      - description: Currency ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Currency'
        "400":
          description: Invalid currency ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Currency not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a currency by ID
      tags:
      - currencies
    put:
      consumes:
      - application/json
      description: Updates an existing currency
      parameters:
      - description: Currency ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated currency
        in: body
        name: currency
        required: true
        schema:
          $ref: '#/definitions/models.Currency'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Currency'
        "400":
          description: Invalid request body or currency ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Currency not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a currency
      tags:
      - currencies
  /health:
    get:
      consumes:
      - application/json
      description: Returns the health status of the API and its dependencies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.HealthResponse'
        "503":
          description: Service unavailable
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Health check
      tags:
      - health
  /providers/nordpool/fetch:
    post:
      consumes:
      - application/json
      description: Triggers the nordpool provider to fetch spot prices for specified
        dates, zones, and currencies. Maximum date range is 14 days.
      parameters:
      - description: Fetch request parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.TriggerNordpoolFetchRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/handlers.TriggerNordpoolFetchResponse'
        "400":
          description: Invalid request body or parameters
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Permission denied - admin only
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Trigger nordpool provider fetch (Admin only)
      tags:
      - providers
  /roles:
    get:
      consumes:
      - application/json
      description: List all roles with optional filtering
      parameters:
      - description: Search term for role name
        in: query
        name: search
        type: string
      - description: Filter by protected status
        in: query
        name: protected
        type: boolean
      - description: Filter by admin group status
        in: query
        name: admin_group
        type: boolean
      - description: Field to order by
        in: query
        name: order_by
        type: string
      - description: Order descending
        in: query
        name: order_desc
        type: boolean
      - description: Limit number of results
        in: query
        name: limit
        type: integer
      - description: Offset results
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Role'
            type: array
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List roles
      tags:
      - roles
    post:
      consumes:
      - application/json
      description: Create a new role (admin only)
      parameters:
      - description: Role details
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Role'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Permission denied - admin only
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Role already exists
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create role
      tags:
      - roles
  /roles/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a role (admin only)
      parameters:
      - description: Role ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role deleted successfully
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Invalid role ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Permission denied - admin only
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Role in use by users
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete role
      tags:
      - roles
    get:
      consumes:
      - application/json
      description: Get a role by its ID (admin only)
      parameters:
      - description: Role ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Role'
        "400":
          description: Invalid role ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Permission denied - admin only
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get role by ID
      tags:
      - roles
    put:
      consumes:
      - application/json
      description: Update a role's details (admin only)
      parameters:
      - description: Role ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Role details
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.UpdateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Role'
        "400":
          description: Invalid request body or role ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Permission denied - admin only
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Role already exists
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update role
      tags:
      - roles
  /spot-prices:
    get:
      consumes:
      - application/json
      description: Returns a list of spot prices for a specific zone and currency
        within a date range (max 7 days)
      parameters:
      - description: Zone name (e.g., 'SE1')
        in: query
        name: zone
        required: true
        type: string
      - description: Currency name (e.g., 'EUR')
        in: query
        name: currency
        required: true
        type: string
      - description: Start time (RFC3339)
        in: query
        name: start_time
        required: true
        type: string
      - description: End time (RFC3339)
        in: query
        name: end_time
        required: true
        type: string
      - description: Order descending
        in: query
        name: order_desc
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SpotPrice'
            type: array
        "400":
          description: Invalid parameters or date range exceeds 7 days
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Zone or currency not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List spot prices
      tags:
      - spot-prices
    post:
      consumes:
      - application/json
      description: Creates or updates one or more spot prices in a single transaction.
        If a spot price with the same timestamp, zone_id, and currency_id exists,
        its price will be updated. Requires admin privileges.
      parameters:
      - description: Spot prices to create or update
        in: body
        name: spot_prices
        required: true
        schema:
          $ref: '#/definitions/models.CreateSpotPricesRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/models.SpotPrice'
            type: array
        "400":
          description: Invalid request body, negative price, or invalid zone/currency
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Permission denied - admin only
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create or update spot prices (Admin only)
      tags:
      - spot-prices
  /spot-prices/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing spot price. Requires admin privileges.
      parameters:
      - description: Spot Price ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Spot price deleted successfully
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Invalid spot price ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Permission denied - admin only
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Spot price not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a spot price (Admin only)
      tags:
      - spot-prices
    get:
      consumes:
      - application/json
      description: Returns a spot price by its ID
      parameters:
      - description: Spot Price ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SpotPrice'
        "400":
          description: Invalid spot price ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Spot price not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a spot price by ID
      tags:
      - spot-prices
  /users:
    get:
      consumes:
      - application/json
      description: List users with optional filtering. Requires admin privileges.
      parameters:
      - description: Search by username or email
        in: query
        name: search
        type: string
      - description: Filter by role ID
        in: query
        name: role_id
        type: string
      - description: Field to order by (username, email, created_at)
        in: query
        name: order_by
        type: string
      - description: Order descending
        in: query
        name: order_desc
        type: boolean
      - description: 'Limit results (default: 50)'
        in: query
        name: limit
        type: integer
      - description: 'Offset results (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Permission denied - admin only
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List users (Admin only)
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user. Users can only delete their own account unless they
        are an admin.
      parameters:
      - description: User ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Permission denied - can only delete own account unless admin
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get a user by their ID (requires auth, users can only access their
        own profile unless admin)
      parameters:
      - description: User ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Permission denied - can only access own profile unless admin
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user's details
      parameters:
      - description: User ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: User details to update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Email already exists
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
  /users/{id}/password:
    put:
      consumes:
      - application/json
      description: Change a user's password (users can only change their own password)
      parameters:
      - description: User ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Password change details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password updated successfully
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Invalid request or password requirements not met
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Permission denied - can only change own password
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Password was recently used
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - users
  /zones:
    get:
      consumes:
      - application/json
      description: Returns a list of all zones
      parameters:
      - description: Search zones by name
        in: query
        name: search
        type: string
      - description: Order by field (name, timezone)
        in: query
        name: order_by
        type: string
      - description: Order descending
        in: query
        name: order_desc
        type: boolean
      - description: Limit results
        in: query
        name: limit
        type: integer
      - description: Offset results
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Zone'
            type: array
        "400":
          description: Invalid parameters
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List all zones
      tags:
      - zones
    post:
      consumes:
      - application/json
      description: Creates a new zone
      parameters:
      - description: Zone to create
        in: body
        name: zone
        required: true
        schema:
          $ref: '#/definitions/models.Zone'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Zone'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new zone
      tags:
      - zones
  /zones/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing zone
      parameters:
      - description: Zone ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid zone ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Zone not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a zone
      tags:
      - zones
    get:
      consumes:
      - application/json
      description: Returns a zone by its ID
      parameters:
      - description: Zone ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Zone'
        "400":
          description: Invalid zone ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Zone not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a zone by ID
      tags:
      - zones
    put:
      consumes:
      - application/json
      description: Updates an existing zone
      parameters:
      - description: Zone ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated zone
        in: body
        name: zone
        required: true
        schema:
          $ref: '#/definitions/models.Zone'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Zone'
        "400":
          description: Invalid request body or zone ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Zone not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a zone
      tags:
      - zones
securityDefinitions:
  BearerAuth:
    description: Bearer token authentication
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
